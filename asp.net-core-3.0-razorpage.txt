1강 ASP NET Core razor pages introduction
vs2019, .net core 3필요
razor pages 프로젝트 만들면 mvc로 만든것과 별차이가 없어보인다.
Controllers, Models등 mvc에서 쓰이던 폴더가 없어지고 Pages폴더가 생겨 있다.

Index.cshtml, Index.cshtml.cs화일이 있다. cshtml화살표 확장하면 cs가 나온다.

Index.cshtml은 @page directive로 시작하는 것만 빼곤 mvc의 view화일과 다를바 없어보인다. 

index.cshtml
@page  <= razor page임을 나타낸다.
@model IndexModel
@{
  ViewData["Title"] = "Home page";
}

<div>
...
</div>


index.cshtml.cs

namespace RazorPagesTutorial.Pages
{
  public class IndexModel : PageModel   <= PageModel을 상속 받는다.
  {
    private readonly ILogger<IndexModel> _logger;

    public string Message { get; set; }

    public IndexModel(ILogger<IndexModel) logger)
    {
      _logger = logger;
    }

    public void OnGet()  <= Get request를 받았을때 호출되는 메서드
    {
      Message = "Hello World! The time now is " + DateTime.Now.ToLongTimeString();
    }
  }
}


mvc는 3가지 컴포넌트로 구성되지만 razor pages는 display template(cshtml)과 이에 대응되는 page model class(cshtml.cs)로 구성된다.
page model classs는 mvc의 controller와 model을 합친것이다.
OnGet()은 Controller의 action처럼 보이며 Message프로퍼티는 Model처럼 보인다. 1개이상의 public property를 통해 display template에 Model을 전달할수있다. 
display template은 mvc의 view에 해당한다.

razor pages는 page에 집중하는 web application을 좀더 빠르고 효율적으로 만들기 위한 새로운 기술이다. asp.net core 2.0에서 처음 나왔었다.
어떤의미에서 razor pages는 classic asp.net webforms framework와 비슷하다.
이전에 webform1을 만들었다면 사실 2개 화일의 쌍이다.

webform1
webform1.aspx (display template) : html을 포함하며 visual part를 control한다.
webform1.aspx.cs : 이벤트를 처리하는 서버쪽 코드

Index
Index.cshtml
Index.cshtml.cs : 페이지 에벤트들을 처리하고, display template이 필요로 하는 데이타를 제공한다.


mvc와의 비교
controller가 request를 처리한다.
controller가 model을 생성하고 view를 골라서 view에 model을 넘긴다.
model, view, controller이외에 action과 viewmodel등이 추가된다.
복잡한 포탈등을 만들때 많은 다른 dependency, viewmodel, 많은 다른 view들이 필요해진다.
결국에는 서로 관련이 없는 많은 action들을 갖는 매우 큰 controller들을 갖게된다.
이는 복잡도를 높이게 되며 single responsibility principle과 open-closed principle을 어기게된다.
반면 razor pages는 단순한 화일의 쌍이다. display template과 그와 관련된 page model class이다.
page model class에 넣는 모든것은 page에 연관된 것들 뿐이다. 점점 커지는 mvc의 controller와는 대조적으로 관련없는 메서드들로 page model이 점점커지는것은 거의 불가능하다.
이는 2개의 화일이 같은 곳에 있으며 서로 매우 연관성이 높기때문에 각각의 페이지를 빌드하는것은 꽤나 직관적이며 여전히 
dependency injection, middleware component, model binding validation등의 asp.net core의 architectural feature를 사용하는것이 가능하다.

web ui를 만들면 razor pages를 web api를 만드려면 mvc를 쓰는것이 ms의 추천!
2가지 기능의 성능차이는 없으며 2가지를 섞어서 써도 된다.

2강 ASP NET core 3 0 project file
<ItemGroup>
  <PackageReference Include="Microsoft.AspNetCore.App" />   <= 이부분이 사라졌다.
</ItemGroup>

Microsoft.AspNetCore.App이 Frameworks로 이동되었다.(solution explorer에서 확인가능)

Microsoft.AspNetCore.App은 메타패키지였으며 몇몇 있던 패키지들이 제거되었다.
-> social login, EntityFramework Core
이는 Nuget으로 다시 추가할수 있다.

직접 csproj화일을 에디트 해도 된다.

3강 Layout view in razor pages project
mvc 28강에 Layout view에대해 다룬다. 차이점은 마이너하다.
첫번째 질문은 Layout view로 불려야 하는가? Layout page로 불려야하는가?이다.
기술적으로 cshtml이 @page directive가 있을때만 razor page로 불려진다.
_Layout.cshtml에는 @page가 없으므로 Layout view로 불려지는게 맞다.

_Layout.cshtml안쪽의 특이점

<title>@ViewData["Title"] - RazorPagesTutorial</title>
ViewData는 Index.cshtml안의 ViewData를 쓰고 있다.

index.cshtml
@page  <= razor page임을 나타낸다.
@model IndexModel
@{
  ViewData["Title"] = "Home page";
}


<a class="navbar-brand" asp-area="" asp-page="/Index">RazorPages</a>
asp-area, asp-page라는 tag-helper가 보인다. 만약 mvc였다면 asp-controller, asp-action이었을 위치이다.

asp-append-version(script, img태그에 쓸수있다.), @RenderBody(), @RenderSection()에 대한 설명~

4강 Razor Pages - Creating Reusable Models Project
Reusable Models Project : Crossplatform으로 Model을 사용할수 있도록 따로 프로젝트로 추가하자.

Class Library(c# .NET Standard Library)로 프로젝트 생성
RazorPagesTutorial.Models 이름으로 생성
Dept.cs
namespace RazorPagesTutorial.Models
{
    public enum Dept
    {
        None,
        HR,
        IT,
        Payroll
    }
}
Employee.cs
namespace RazorPagesTutorial.Models
{
    public class Employee
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string Email { get; set; }
        public string PhotoPath { get; set; }
        public Dept? Department { get; set; }
    }
}

5강 Razor Pages Creating Reusable Data Access Project
Class Library(c# .NET Standard Library)로 프로젝트 생성
RazorPagesTurorial.Services 프로젝트 생성 <= NETStandard.Library에만 디펜던시가 있다.
RazorPagesTutorial.Models를 디펜던시에 추가

RazorPagesTurorial.Services.csproj에 다음과 같은 줄이 추가된다.
<ItemGroup>
  <ProjectReference Include="..\RazorPagesTutorial.Models\RazorPagesTutorial.Models.csproj"/>
</ItemGroup>

DI를 사용하여 service를 사용할수있게 하기위해
IEmployeeRepository 추가
IEmployeeRepository.cs
using RazorPagesTutorial.Models;
using System.Collections.Generic;

namespace RazorPagesTutorial.Services
{
    public interface IEmployeeRepository
    {
        IEnumerable<Employee> GetAllEmployees();
    }
}

일단 하드코딩된 MockEmployeeRepository추가
MockEmployeeRepository.cs추가
using RazorPagesTutorial.Models;
using System.Collections.Generic;

namespace RazorPagesTutorial.Services
{
    public class MockEmployeeRepository : IEmployeeRepository
    {
        private List<Employee> _employeeList;

        public MockEmployeeRepository()
        {
            _employeeList = new List<Employee>()
            {
                new Employee() { Id = 1, Name = "Mary", Department = Dept.HR,
                    Email = "mary@pragimtech.com", PhotoPath="mary.png" },
                new Employee() { Id = 2, Name = "John", Department = Dept.IT,
                    Email = "john@pragimtech.com", PhotoPath="john.png" },
                new Employee() { Id = 3, Name = "Sara", Department = Dept.IT,
                    Email = "sara@pragimtech.com", PhotoPath="sara.png" },
                new Employee() { Id = 4, Name = "David", Department = Dept.Payroll,
                    Email = "david@pragimtech.com" },
            };
        }

        public IEnumerable<Employee> GetAllEmployees()
        {
            return _employeeList;
        }
    }
}

6강 Registering services in razor pages project
RazorPagesTutorial - This is the razor pages web application project
RazorPagesTutorial.Models - This is a .Net standard class library project that contains the models like Employee and Department.
RazorPagesTutorial.Services - This is also a .Net standard class library project that contains data access services.

RazorPagesTutorial프로젝트에 기존 추가한 프로젝트를 디펜던시에 추가

Injecting Services

index.cshtml.cs

using Microsoft.AspNetCore.Mvc.RazorPages;
using RazorPagesTutorial.Models;
using RazorPagesTutorial.Services;
using System.Collections.Generic;

namespace RazorPagesTutorial.Pages.Employees
{
    public class IndexModel : PageModel
    {
        private readonly IEmployeeRepository employeeRepository;

        // This public property holds the list of employees 
        // Display Template (Index.html) has access to this property
        public IEnumerable<Employee> Employees { get; set; }

        // Inject IEmployeeRepository service. It is this service
        // that knows how to retrieve the list of employees
        public IndexModel(IEmployeeRepository employeeRepository)
        {
            this.employeeRepository = employeeRepository;
        }

        // This method handles the GET request to /Employees/Index
        public void OnGet()
        {
            Employees = employeeRepository.GetAllEmployees();
        }
    }
}

/Employees/Index를 이 시점에 실행시키면 에러 난다.

InvalidOperationException: Unable to resolve service for type 'RazorPagesTutorial.Services.IEmployeeRepository' while attempting to activate 
'RazorPagesTutorial.Pages.Employees.IndexModel'.

startup.cs에 다음 코드 추가
public void ConfigureServices(IServiceCollection services)
{
    services.AddRazorPages();
    services.AddSingleton<IEmployeeRepository, MockEmployeeRepository>();
}

7강 List razor page

List razor page
Suggested Videos
Part 4 - Razor Pages - Creating Reusable Models Project | Text | Slides
Part 5 - Razor Pages - Creating Reusable Data Access Project | Text | Slides
Part 6 - Registering services in razor pages project | Text | Slides

In this video we will implement the razor code to display the list of employees. We want the list razor page to look like the following.


 

list razor page
Index.cshtml.cs (PageModel)
using Microsoft.AspNetCore.Mvc.RazorPages;
using RazorPagesTutorial.Models;
using RazorPagesTutorial.Services;
using System.Collections.Generic;

namespace RazorPagesTutorial.Pages.Employees
{
    public class IndexModel : PageModel
    {
        private readonly IEmployeeRepository employeeRepository;
        public IEnumerable<Employee> Employees { get; set; }

        public IndexModel(IEmployeeRepository employeeRepository)
        {
            this.employeeRepository = employeeRepository;
        }

        public void OnGet()
        {
            Employees = employeeRepository.GetAllEmployees();
        }
    }
}

Index.cshtml (Display Template)
@page
@model RazorPagesTutorial.Pages.Employees.IndexModel
@{
    ViewData["Title"] = "Index";
}

<style>
    .btn {
        width: 75px;
    }
</style>

<h1>Employees</h1>

<div class="card-deck">
    @foreach (var employee in Model.Employees)  <= 루프를 돌면서 그린다...뭐 그런거에만 주목...
    {
        var photoPath = "~/images/" + (employee.PhotoPath ?? "noimage.jpg");
        <div class="card m-3" style="min-width: 18rem; max-width:30.5%;">
            <div class="card-header">
                <h3>@employee.Name</h3>
            </div>

            <img class="card-img-top imageThumbnail" src="@photoPath"
                 asp-append-version="true" />

            <div class="card-footer text-center">
                <a href="#" class="btn btn-primary m-1">View</a>
                <a href="#" class="btn btn-primary m-1">Edit</a>
                <a href="#" class="btn btn-danger m-1">Delete</a>
            </div>
        </div>
    }
</div>

RazorPages는 각각의 독립적인 모델을 가지고 있어서 모델 클래스와 service클래스를 다른 프로젝트로 뺀듯...

8강 Routing in asp net core razor pages
MVC처럼 RazorPages 또한 convention과 어떻게 routing이 되어야 하는지 컨트롤 하는 configuration의 조합을 쓴다.
내부에서 MVC와 같은 routing infrastructure를 쓰고 있다는 것을 알고 있자. 차이점들은 routes가 어떻게 configure되는가에 있다.

MVC에서는 들어오는 request URL을 controller action에 매핑시키기위해 convention-based 또는 attribute routing 을 사용하였다.
RazorPages에서는 file path가 URL을 결정하게된다.
디폴트로 모든 razor page들은 Pages 디렉토리에 존재해야한다.

Default URL mapping in razor pages
https://localhost:1234/
https://localhost:1234/Index
위의 두 주소는 같은 화일에 도달한다.
그냥 쉽게 프론트에서 생각하던 웹 주소로 생각하자...


AmbiguousMatchException: The request matched multiple endpoints
Pages폴더에 Employees.cshtml Razor page가 있을때 /employee/Index는 (Pages/Employees/List.csthml)이 예상대로 제공되어진다.
하지만 /Employees는 다음과 같은 예외를 발생시킨다.
AmbiguousMatchException: The request matched multiple endpoints. Matches:
/Employees
/Employees/Index

한가지 url이 여러 razor page들에 매핑되기때문에 어떤것을 제공해야될지 몰라 예외를 발생시킨다.

이럴때는 다음과 같은 3가지 방법이있다.
1.rename razor page
2.overiding default routes
3.use route parameters

Overriding Default Routes
razor pages에서는 디폴트로 url은 물리적 화일들의 위치에 매핑된다. 하지만 이러한 디폴트 동작을 override하여 화일 이름과 상관없이 만들수있다.

예를 들어 Pages/Employees/Index.cshtml에 접근하려면 다음과 같은 url을 사용한다.
/Employees  (This is throwing an exception as it matches multiple razor pages)
/Employees/Index
이를 피하기 위해 @page directive를 사용하여 default route를 override한다.
@page "/EmployeeList" (Pages/Employees/Index.cshtml에 사용)
위의 directive를 사용하게되면 /EmployeeList만이 Pages/Employees/Index.cshtml에 접근할수있다.
/Employees/Index 는 404 에러이다.

@page "List"
위의 예제에서는 /,~/ 로 시작하지 않음에 주목하라. 이는 상대경로를 사용하게된다.
Pages/Employees/Index.cshtml에 도달하기 위해서는 URL /Employees/List를 사용하여야한다.


Razor page route parameters
route parameters 또한 AmbiguousMatchException을 해결하는데 쓸수있다. route parameter는 curly braces로 표기된다.
@page "/Employees/{name}"

name parameter에 어떤것이든 넣을수 있다.
/Employees/ABC
/Employees/David
/Employees/123
모두 Pages/Employees/Index.cshtml에 매핑된다.

/Employees은 Pages/Employees.cshtml에 매핑된다.
route parameter들에는 constraints를 명시할수도있다. 나중에 더 제세히 살펴보자.
@page "/Employees/{name:alpha}"


9강 Query string parameters in asp net core razor pages
employee에서 view를 클릭하면 Details.cshtml razor page로 이동해야한다. 이때 employee id를 패스해야한다.

<a asp-page="/Employees/Details" asp-route-ID="@employee.Id"  <= loop안에 넣는다.
   class="btn btn-primary m-1">View</a>

asp-page는 Details razor page를 가리킨다.
asp-route-ID는 employee.Id를 Details razor page로 패스한다.
asp-route-* tag helper를 몇개든 원하는대로 포함할수있다. 예를 들면 asp-route-name처럼..

https://localhost:44383/Employees/Details?ID=1 query string parameter를 생성한다.
Model-binding이 ID query string parameter 값을 PageModel클래스의 OnGet()메서드의 id parameter로 전달한다.
Details.cshtml.cs
using Microsoft.AspNetCore.Mvc.RazorPages;
using RazorPagesTutorial.Models;
using RazorPagesTutorial.Services;

namespace RazorPagesTutorial.Pages.Employees
{
    public class DetailsModel : PageModel
    {
        private readonly IEmployeeRepository employeeRepository;

        public DetailsModel(IEmployeeRepository employeeRepository)
        {
            this.employeeRepository = employeeRepository;
        }

        public Employee Employee { get; private set; }

        // Model-binding automatically maps the query string id
        // value to the id parameter on this OnGet() method
        public void OnGet(int id)
        {
            Employee = employeeRepository.GetEmployee(id);
        }
    }
}

Details.cshtml
@page
@model RazorPagesTutorial.Pages.Employees.DetailsModel
@{
    ViewData["Title"] = "Details";
    var photoPath = "~/Images/" + (Model.Employee.PhotoPath ?? "noimage.jpg");
}

<div class="row justify-content-center m-3">
    <div class="col-sm-8">
        <div class="card">
            <div class="card-header">
                <h1>@Model.Employee.Name</h1>
            </div>

            <div class="card-body text-center">
                <img class="card-img-top" src="@photoPath" asp-append-version="true" />

                <h4>Employee ID : @Model.Employee.Id</h4>
                <h4>Email : @Model.Employee.Email</h4>
                <h4>Department : @Model.Employee.Department</h4>

            </div>
            <div class="card-footer text-center">
                <a asp-page="index"  <= 상대경로로 주었다.
                   class="btn btn-primary">Back</a>
                <a href="#" class="btn btn-primary">Edit</a>
                <a href="#" class="btn btn-danger">Delete</a>
            </div>
        </div>
    </div>
</div>

IEmployeeRepository.cs
using RazorPagesTutorial.Models;
using System.Collections.Generic;

namespace RazorPagesTutorial.Services
{
    public interface IEmployeeRepository
    {
        IEnumerable<Employee> GetAllEmployees();
        Employee GetEmployee(int id);
    }
}

MockEmployeeRepository.cs
using RazorPagesTutorial.Models;
using System.Collections.Generic;
using System.Linq;

namespace RazorPagesTutorial.Services
{
    public class MockEmployeeRepository : IEmployeeRepository
    {
        private List<Employee> _employeeList;

        public MockEmployeeRepository()
        {
            _employeeList = new List<Employee>()
            {
                new Employee() { Id = 1, Name = "Mary", Department = Dept.HR,
                    Email = "mary@pragimtech.com", PhotoPath="mary.png" },
                new Employee() { Id = 2, Name = "John", Department = Dept.IT,
                    Email = "john@pragimtech.com", PhotoPath="john.png" },
                new Employee() { Id = 3, Name = "Sara", Department = Dept.IT,
                    Email = "sara@pragimtech.com", PhotoPath="sara.png" },
                new Employee() { Id = 4, Name = "David", Department = Dept.Payroll,
                    Email = "david@pragimtech.com" },
            };
        }

        public IEnumerable<Employee> GetAllEmployees()
        {
            return _employeeList;
        }

        public Employee GetEmployee(int id)
        {
            return _employeeList.FirstOrDefault(e => e.Id == id);
        }
    }
}

ASP.NET Core RouteOptions
RouteOptions는 query string parameters를 커스터마이즈 할수있게 한다.
services.Configure<RouteOptions>(options =>
{
    options.LowercaseUrls = true;  <= https://localhost:44383/employees/details?ID=1
    options.LowercaseQueryStrings = true; <= https://localhost:44383/employees/details?id=1  LowercaseQueryStrings은 LowercaseUrls이 true이어야 작동한다!
    options.AppendTrailingSlash = true; <= https://localhost:44383/employees/details/?id=1
});


10강 Route parameters in asp net core razor pages
Pages/Employees/Details.cshtml, Pages/Employees/Index.cshtml이 있다고 가정한다.
Index.cshtml은 모든 Employee를 디스플레이하고, Details.cshtml은 특정 employee의 디테일을 디스플레이한다.
이전 강에서 Employee의 ID가 parameter로 전달되었다.

다음 예를 생각해보자
<a asp-page="/Employees/Details" asp-route-ID="@employee.Id">
    View
</a>
디폴트로 query string parameter로 Employee ID가 전달된다.
https://localhost:12345/employees/details/?id=1

대신 route parameter로 전달되기를 원한다면 route template과 route parameter를 명시하여 사용하여야한다.
route template은 .cshtml화일의 @page directive 다음에 표시된다. route parameter는 curly braces안에 명시한다.
@page "{id}"
위의 변경으로 Employee ID는 route parameter로 전달된다.
https://localhost:12345/employees/details/1/ 

/employees/details/ID 는 이제 Details.cshtml의 path가 된다.
만약 이 path를 바꾸려면 route template을 사용할수있다.

/employees/details/view/1/ 은 다음의 route template로 생성되어지는 URL이다. route template이 /, ~/ 로 시작하지 않기때문에 view/{id}이 default root file path인
/employees/details 뒤에 append된다.
@page "View/{id}"

만약 route template이 /,~/로 시작한다면 root file path(/employees/details)는 무시된다.\
다음의 route template으로 URL /employees/view/1/이 생성된다.
@page "/Employees/View/{id}"

여러개의 place holder를 포함하여 여러 parameter를 패스할수도있다.
@page "/Employees/{country}/{state}"

Accessing route parameters

route parameter 처럼 같은 이름을 가진 parameter를 추가하면 접근 가능하다.
public class DetailsModel : PageModel
{
    public void OnGet(int id)
    {
        Employee = employeeRepository.GetEmployee(id);
    }
}

만약 Display template에 route parameter value가 필요하다면 public property에 값을 할당하면된다.

public class DetailsModel : PageModel
{
    public int Id { get; set; }

    public void OnGet(int id)
    {
        Id = id;
    }
}

BindProperty in ASP.NET Core
위와 같이 일일이 할당하는 대신에 BindProperty attribute를 SupportsGet property true를 사용할수도 있다.

public class DetailsModel : PageModel
{
    [BindProperty(SupportsGet = true)]  <= 요렇게
    public int Id { get; set; }

    public void OnGet()
    {
        // Id property is available inside this  <= 메서드안에서 파라메터로 받지 않아도 사용할수있다.
        // OnGet() method & the Display Template
    }
}

BindProperty and SupportsGet
디폴트로 BindProperty attribute는 request가 POST request일 경우에만 PageModel class에 있는 property들에 bind한다.
만약 request가 GET일경우 value는 Bind되지 않는다. 하지만 SupportsGet을 true로 세팅하면 GET일경우에도 bind한다.

11강 Route constraints in asp net core
Route constraints라는 개념은 mvc, web api, razor pages 모두에서 쓸수 있다.
Route constraints는 원하지 않는 route value가 controller의 action이나 RazorPages의 Page handler method에 도달하지 못하도록 필터링하거나 제한하는 메카니즘이다.

다음은 id route parameter를 기대하지만 진짜 아무 값이나 올 수있다.
@page "{id}"

route parameter value는 datatype과 range로 제약할수있다. :과 constraint를 쓴다.
다음은 int만 올수있으며 int가 아닌 경우에는 404 error를 발생시킨다.
@page "{id:int}"

Route constraint parameters
@page "{id:min(1)}"

Multiple route constraints
@page "{id:min(1):max(5)}"
@page "{id:range(1,5)}"

Optional route parameters and route constraints
@page "{id?}"
@page "{id:range(1,5)?}"  <= constraint가 걸려있을경우 맨뒤에 ?가 와야 한다.
@page "{id?:range(1,5)}"  <= RoutePatternException
The route parameter name 'id?' is invalid. Route parameter names must be non-empty and cannot contain these characters: '{', '}', '/'. 
The '?' character marks a parameter as optional, and can occur only at the end of the parameter.

*문자는 catch-all을 의미하며 파라메터의 처음에만 올수있다.

Common built-in route constraints
int	{id:int}	Only integer values allowed
Similarly other built-in datatypes like decimal, float, double, datetime, bool, long, guid can also be used as constraints
alpha	{firstName:alpha}	String must contain only alphabets
minlength(value)	{firstName:minlength(5)}	String must be at least 5 characters
maxlength(value)	{firstName:maxlength(10)}	String must not be more than 10 characters
length(min,max)	{firstName:length(5,10)}	String must be at least 5 and not more than 10 characters in length
length(length)	{firstName:length(10)}	String must be exactly 10 characters in length
min(value)	{id:min(1)}	Integer value must be at least 1
max(value)	{id:max(100)}	Integer value must not be more than 100
range(min,max)	{id:range(1,100)}	Integer value must be between 1 and 100 (inclusive)
regex(expression)	String must match the pattern specified by the regular expression

12강 ASP NET core custom route constraint
Microsoft.AspNetCore.Http namespace에 있는 IRouteConstraint를 상속 받는다.
Match()라는 하나의 메서드를 구현하면된다.

public interface IRouteConstraint : IParameterPolicy
{
            bool Match(HttpContext httpContext, IRouter route, string routeKey, 
                       RouteValueDictionary values, RouteDirection routeDirection);
}

IRouteConstraint Match() method parameters
httpContext:	Contains information about the HTTP request
route:	The router that this constraint belongs to
routeKey:	Contains the name of the route parameter
values:	A dictionary that contains the route parameter values
routeDirection:	An object that indicates whether the constraint check is being performed when an incoming request is being handled or when a URL is being generated

Custom route constraint example
Employee의 id를 짝수인것만 허용하고 싶다고 가정하자. 기존의 built in constraint로는 안되니 만들자.
public class EvenConstraint : IRouteConstraint
{
    public bool Match(HttpContext httpContext, IRouter route, string routeKey,  <= 만들고 디버깅을 걸어서 각 파라메터를 확인해 보는것이 중요.
        RouteValueDictionary values, RouteDirection routeDirection)
    {
        int id;

        if (Int32.TryParse(values["id"].ToString(), out id))
        {
            if (id % 2 == 0)
            {
                return true;
            }
        }

        return false;
    }
}

routeDirection.IncomingRequest 일경우 validation할때 constraint가 쓰이는것이다.
Details로 갔을때 루프를 돌며 view의 링크를 생성하는 곳으로 가게되면 EvenConstraint가 다시 호출되는 것을 볼수있다.
routeDirection.UrlGeneration 으로 값이 들어오며 false가 떨어지게 되면 url이 생성되지 않는다!
<a class="btn btn-primary m-1" href="">View</a>  <= asp-route-ID = 1 일경우 링크가 생성되지 않았다!

Register custom constraint
만들어진 route constraint는 ConstraintMap에 등록되어야 한다.
public void ConfigureServices(IServiceCollection services)
{
    services.Configure<RouteOptions>(options =>
    {
        options.ConstraintMap.Add("even", typeof(EvenConstraint));
    });
}

Using custom route constraint
@page "/employees/view/{id:even}"


13강 Handling 404 error in razor pages project
OnGet을 다음과 같이 수정!
public IActionResult OnGet(int id) <= void 리턴에서 IActionResult로 바뀌었다.
{
    Employee = employeeRepository.GetEmployee(id);

    if(Employee == null)
    {
        return RedirectToPage("/NotFound");
    }

    return Page();  <= rerender하라!
}

NotFound razor page
@page
@{
    ViewData["Title"] = "NotFound";
}

<h1>The resource you are looking for cannot be found</h1>
<a asp-page="/Employees/Index" class="btn btn-primary">
    Click here to go back to Home
</a>


14강 Editing data in asp net core razor pages
edit를 눌렀을때 (/Employees/Index.cshtml) eidt razor page로 가자 (/Employees/Edit.cshtml)
<a asp-page="/Employees/Edit" asp-route-ID="@employee.Id" class="btn btn-primary m-1">Edit</a>

Edit.cshtml.cs
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using RazorPagesTutorial.Models;
using RazorPagesTutorial.Services;

namespace RazorPagesTutorial.Pages.Employees
{
    public class EditModel : PageModel
    {
        private readonly IEmployeeRepository employeeRepository;

        public EditModel(IEmployeeRepository employeeRepository)
        {
            this.employeeRepository = employeeRepository;
        }

        // This is the property the display template will use to
        // display existing Employee data
        public Employee Employee { get; private set; }

        // Populate Employee property
        public IActionResult OnGet(int id)
        {
            Employee = employeeRepository.GetEmployee(id);

            if (Employee == null)
            {
                return RedirectToPage("/NotFound");
            }

            return Page();
        }
    }
}

Edit.cshtml
@page "{id:min(1)}"
@model RazorPagesTutorial.Pages.Employees.EditModel
@{
    ViewData["Title"] = "Edit";
}

<h1>Edit</h1>

<form method="post" class="mt-3">
    @*Use hidden input elements to store employee id which
        we need when we submit the form*@
    <input hidden asp-for="Employee.Id" />

    @*asp-for tag helper takes care of displaying the existing
        data in the respective input elements*@
    <div class="form-group row">
        <label asp-for="Employee.Name" class="col-sm-2 col-form-label">
        </label>
        <div class="col-sm-10">
            <input asp-for="Employee.Name" class="form-control" placeholder="Name">
        </div>
    </div>
    <div class="form-group row">
        <label asp-for="Employee.Email" class="col-sm-2 col-form-label"></label>
        <div class="col-sm-10">
            <input asp-for="Employee.Email" class="form-control" placeholder="Email">
        </div>
    </div>

    <div class="form-group row">
        <label asp-for="Employee.Department" class="col-sm-2 col-form-label"></label>
        <div class="col-sm-10">
            <select asp-for="Employee.Department" class="custom-select mr-sm-2"
                    asp-items="Html.GetEnumSelectList<Dept>()">  <= Dept의 namespace를 포함시켜 줘야 한다. cshtml에 using을 쓰던, _ViewImport에 using으로 포함시켜주자!
                <option value="">Please Select</option>
            </select>
        </div>
    </div>

    <div class="form-group row">
        <div class="col-sm-10">
            <button type="submit" class="btn btn-primary">Update</button>
            <a asp-page="/Employees/Index" class="btn btn-primary">Cancel</a>
        </div>
    </div>
</form>

Changes in _ViewImports.cshtml
@using RazorPagesTutorial.Models을 포함시켜준다!


15강 Updating data in asp net core razor pages
